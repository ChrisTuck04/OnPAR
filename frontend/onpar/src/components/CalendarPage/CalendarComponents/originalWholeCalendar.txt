const WholeCalendar = () => {
  return (
    <div className="flex-auto h-full bg-onparLightYellow border-onparOrange border-[5px] rounded-[40px] overflow-hidden">
      <CalendarHeading/>
      <CalendarGrid/>
    </div>
  )
}

const CalendarHeading = () => {

  const daysOfWeek = ['S','M','T','W','T','F','S']
  const months= ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]

  const left = "<<"
  const right = ">>"

  return (
    <div>
        <div className="relative grid grid-cols-3 text-center font-fredoka text-black top-[8px]" style={{WebkitTextStroke:"1px #FFAA00"}}>
            <button className="text-[25px] py-2">
              {left}
            </button>

            <div className="text-[35px]">
              {months[6]}
            </div>

            <button className="text-[25px] py-2">
              {right}
            </button>
        </div>

        <div>
            <hr className="absolute w-full border-t-[4px] border-onparOrange top-[62px]"/>
            <hr className="absolute w-full border-t-[4px] border-onparOrange top-[110px]"/>
        </div>

         <div className="relative grid grid-cols-7 text-center font-fredoka text-lg text-black top-[6px] " style={{WebkitTextStroke:"1px #FFAA00"}}>
        {daysOfWeek.map((day, index) => (
          <div key={index} className="border-[2px] border-onparOrange py-2 px-[40px]">
            {day}
          </div>
        ))}
      </div>

    </div>
  )
}

const CalendarGrid = () => {
  return (
    <div className="relative grid grid-cols-7 justify-center text-center text-black text-fredoka top-[6px] rounded-b-[30px]">
        {[...Array(42)].map((_,index) => (
            <CalendarCell key={index} dayNum={index}/>
        ))}
    </div>
  )
}

interface Props {
    dayNum: number
}

const CalendarCell = ({dayNum} : Props) => {
  return (
    <div key={dayNum} className="border-[2px] border-onparOrange py-[33px] hover:bg-onparOrange">
      Emotions
    </div>
  )
}



export default WholeCalendar




import { useState } from 'react';
import {
  format,
  addMonths,
  subMonths,
  startOfMonth,
  endOfMonth,
  getDaysInMonth,
  getDay,
  isSameMonth,
  isToday,
  getDate,
  addDays,
} from 'date-fns';

const WholeCalendar = () => {
  // It's initialized to the current date.
  const [currentDate, setCurrentDate] = useState(new Date());

  const goToPreviousMonth = () => {
    setCurrentDate((prevDate) => subMonths(prevDate, 1));
  };

  const goToNextMonth = () => {
    setCurrentDate((prevDate) => addMonths(prevDate, 1));
  };

  return (
    <div className="flex-auto h-full bg-onparLightYellow border-onparOrange border-[5px] rounded-[40px] overflow-hidden">

      <CalendarHeading
        currentDate={currentDate}
        goToPreviousMonth={goToPreviousMonth}
        goToNextMonth={goToNextMonth}
      />
  
      <CalendarGrid currentDate={currentDate} />
    </div>
  );
};

interface CalendarHeadingProps {
  currentDate: Date;
  goToPreviousMonth: () => void;
  goToNextMonth: () => void;
}


const CalendarHeading = ({currentDate, goToPreviousMonth, goToNextMonth,}: CalendarHeadingProps) => {

  const daysOfWeek = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];

  return (
    <div>
      <div
        className="relative grid grid-cols-3 text-center font-fredoka text-black top-[8px]"
        style={{ WebkitTextStroke: '1px #FFAA00' }}
      >
      
        <button className="text-[25px] py-2" onClick={goToPreviousMonth}>
          {'<<'}
        </button>

        <div className="text-[35px]">
          {format(currentDate, 'MMMM yyyy')}
        </div>

        <button className="text-[25px] py-2" onClick={goToNextMonth}>
          {'>>'}
        </button>
      </div>

      <div>
        <hr className="absolute w-full border-t-[4px] border-onparOrange top-[62px]" />
        <hr className="absolute w-full border-t-[4px] border-onparOrange top-[110px]" />
      </div>

      <div
        className="relative grid grid-cols-7 text-center font-fredoka text-lg text-black top-[6px] "
        style={{ WebkitTextStroke: '1px #FFAA00' }}
      >
        {daysOfWeek.map((day, index) => (
          <div key={index} className="border-[2px] border-onparOrange py-2 px-[40px]">
            {day}
          </div>
        ))}
      </div>
    </div>
  );
};

interface CalendarGridProps {
  currentDate: Date;
}

const CalendarGrid = ({ currentDate }: CalendarGridProps) => {

  const days = [];

  const monthStart = startOfMonth(currentDate);
  //const monthEnd = endOfMonth(currentDate);
  
  const numDaysInMonth = getDaysInMonth(currentDate);
  const firstDayOfMonthWeekday = getDay(monthStart); // 0 (Sunday) - 6 (Saturday)

  
  const numLeadingEmptyCells = firstDayOfMonthWeekday;
  const numTrailingEmptyCells = 42 - (numLeadingEmptyCells + numDaysInMonth);

  // Populate leading filler days from the previous month
  // We need to calculate the actual dates for these cells to display them.
  const prevMonthLastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0); // Last day of previous month
  for (let i = numLeadingEmptyCells; i > 0; i--) {
    const day = addDays(prevMonthLastDay, -i + 1); // Calculate the date
    days.push({ date: day, isCurrentMonth: false, isToday: false });
  }

  // Populate current month days
  for (let i = 1; i <= numDaysInMonth; i++) {
    const day = new Date(currentDate.getFullYear(), currentDate.getMonth(), i);
    days.push({date: day, isCurrentMonth: true, isToday: isToday(day),});
  }

  // Populate trailing filler days from the next month
  for (let i = 1; i <= numTrailingEmptyCells; i++) {
    const day = new Date(currentDate.getFullYear(), currentDate.getMonth() + 1, i);
    days.push({ date: day, isCurrentMonth: false, isToday: false });
  }

  return (
    <div className="relative grid grid-cols-7 justify-center text-center text-black text-fredoka top-[6px] rounded-b-[30px] ">
      {days.map((day, index) => (
        <CalendarCell key={index} day={day} />
      ))}
    </div>
  );
};

interface CalendarCellProps {
  day: {
    date: Date;
    isCurrentMonth: boolean;
    isToday: boolean;
  };
}

// CalendarCell component represents a single day in the calendar grid.
const CalendarCell = ({ day }: CalendarCellProps) => {
  return (
    <div
      key={day.date.toISOString()}
      className={`relative border-[2px] font-fredoka border-onparOrange py-[33px] hover:bg-onparOrange
      ${!day.isCurrentMonth ? 'text-gray-400 text-transparent' : ''}
      ${day.isToday ? 'bg-onparOrange text-black' : ''}`}
    >
      <p className={`
        ${day.isCurrentMonth ? 'absolute top-2 left-1/2 transform -translate-x-1/2 w-[30px] h-[30px] rounded-full bg-onparOrange flex items-center justify-center text-sm' : ''}`}>
        {getDate(day.date)}
      </p>
      {/* Placeholder for emotions/events - will be implemented later */}
    </div>
  );
};

export default WholeCalendar;
